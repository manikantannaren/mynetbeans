/*
 * Copyright 2015 Manikantan Narender Nath.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.github.manikantannaren.nb.archive.options;

import io.github.manikantannaren.nb.archive.ArchiverAction;
import java.util.prefs.Preferences;
import org.openide.util.NbBundle;
import org.openide.util.NbPreferences;

@NbBundle.Messages({
    "logExecutionCheckbox.txt=Show execution output",
    "showAddToFavoritesDialogCheckBox.txt=Show Add to favorites dialog",
    "logexecutionhelptext=Displays an output window showing the progress of execution."
            + "NOTE: This is useful for collecting log information and paste it into an issue if the plugin does not behave as expected",
    "showaddtofavdialog.helptext=Displays a dialog at the end of the archive creation. The dialog will allow you to show the generated file in the favorites window"
})
final class ArchiverPanel extends javax.swing.JPanel {

    private final ArchiverOptionsPanelController controller;

    ArchiverPanel(ArchiverOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
        // TODO listen to changes in form fields and call controller.changed()
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        logExecutionCheckbox = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jScrollPane1.getViewport().setOpaque(false);
        logExecutionHeltextArea = new javax.swing.JTextArea();
        showAddToFavoritesDialogCheckBox = new javax.swing.JCheckBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane2.getViewport().setOpaque(false);
        addToFavoritesHelpTextArea = new javax.swing.JTextArea();

        org.openide.awt.Mnemonics.setLocalizedText(logExecutionCheckbox, Bundle.logExecutionCheckbox_txt());

        jScrollPane1.setBorder(null);
        jScrollPane1.setOpaque(false);

        logExecutionHeltextArea.setEditable(false);
        logExecutionHeltextArea.setColumns(20);
        logExecutionHeltextArea.setLineWrap(true);
        logExecutionHeltextArea.setRows(5);
        logExecutionHeltextArea.setText(Bundle.logexecutionhelptext());
        logExecutionHeltextArea.setWrapStyleWord(true);
        logExecutionHeltextArea.setCursor(null);
        logExecutionHeltextArea.setEnabled(false);
        logExecutionHeltextArea.setFocusable(false);
        logExecutionHeltextArea.setOpaque(false);
        jScrollPane1.setViewportView(logExecutionHeltextArea);

        org.openide.awt.Mnemonics.setLocalizedText(showAddToFavoritesDialogCheckBox, Bundle.showAddToFavoritesDialogCheckBox_txt());
        showAddToFavoritesDialogCheckBox.setEnabled(false);

        jScrollPane2.setBorder(null);
        jScrollPane2.setOpaque(false);

        addToFavoritesHelpTextArea.setEditable(false);
        addToFavoritesHelpTextArea.setColumns(20);
        addToFavoritesHelpTextArea.setLineWrap(true);
        addToFavoritesHelpTextArea.setRows(5);
        addToFavoritesHelpTextArea.setText(Bundle.showaddtofavdialog_helptext());
        addToFavoritesHelpTextArea.setWrapStyleWord(true);
        addToFavoritesHelpTextArea.setBorder(null);
        addToFavoritesHelpTextArea.setCursor(null);
        addToFavoritesHelpTextArea.setEnabled(false);
        addToFavoritesHelpTextArea.setFocusable(false);
        addToFavoritesHelpTextArea.setOpaque(false);
        jScrollPane2.setViewportView(addToFavoritesHelpTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 569, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(showAddToFavoritesDialogCheckBox)
                    .addComponent(logExecutionCheckbox)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jScrollPane1, jScrollPane2, logExecutionCheckbox, showAddToFavoritesDialogCheckBox});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(logExecutionCheckbox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(showAddToFavoritesDialogCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jScrollPane1, jScrollPane2});

    }// </editor-fold>//GEN-END:initComponents

    void load() {
        // read settings and initialize GUI
        Preferences prefs = NbPreferences.forModule(ArchiverAction.class);
        Boolean value = prefs.getBoolean(ArchiverPreferencesKeys.LOG_OUTPUT.name(), false);
        logExecutionCheckbox.setSelected(value);
        value = prefs.getBoolean(ArchiverPreferencesKeys.SHOW_ADD_TO_FAV_DIALOG.name(), false);
        showAddToFavoritesDialogCheckBox.setSelected(value);
//        prefs.
    }

    void store() {
        // TODO store modified settings
        // Example:
        // Preferences.userNodeForPackage(ArchiverPanel.class).putBoolean("someFlag", someCheckBox.isSelected());
        // or for org.openide.util with API spec. version >= 7.4:
        // NbPreferences.forModule(ArchiverPanel.class).putBoolean("someFlag", someCheckBox.isSelected());
        // or:
        // SomeSystemOption.getDefault().setSomeStringProperty(someTextField.getText());
        Preferences prefs = NbPreferences.forModule(ArchiverAction.class);
        prefs.putBoolean(ArchiverPreferencesKeys.LOG_OUTPUT.name(), logExecutionCheckbox.isSelected());
        prefs.putBoolean(ArchiverPreferencesKeys.SHOW_ADD_TO_FAV_DIALOG.name(), showAddToFavoritesDialogCheckBox.isSelected());
    }

    boolean valid() {
        // TODO check whether form is consistent and complete
        return true;
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea addToFavoritesHelpTextArea;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JCheckBox logExecutionCheckbox;
    private javax.swing.JTextArea logExecutionHeltextArea;
    private javax.swing.JCheckBox showAddToFavoritesDialogCheckBox;
    // End of variables declaration//GEN-END:variables
    
//    private class ArchivePreferencesChangeListener implements 
}
