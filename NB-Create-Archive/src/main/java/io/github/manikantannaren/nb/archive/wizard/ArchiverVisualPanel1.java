/*
 * Copyright 2015 Manikantan Narender Nath.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.github.manikantannaren.nb.archive.wizard;

import java.io.File;
import java.util.Dictionary;
import java.util.Hashtable;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.FileUtil;
import org.openide.util.ChangeSupport;
import org.openide.util.NbBundle;
import org.openide.util.NbBundle.Messages;
import io.github.manikantannaren.nb.archive.ArchiverUserSelections;
import io.github.manikantannaren.nb.archive.util.LoggerProvider;

@Messages({
    "ExportZipVisualPanel1_NAME=Destination details",
    "ExportZipVisualPanel1.locationLabel.text=Location",
    "ExportZipVisualPanel1.fileNameLabel.text=File Name",
    "ExportZipVisualPanel1.browseButton.text=...",
    "ExportZipVisualPanel1.jfilechooser.approvebutton.text=Select",
    "ExportZipVisualPanel1.COMPRESSION.LEVEL=Compression Level",
    "ExportZipVisualPanel1.COMPRESSION.LEVEL.0=None",
    "ExportZipVisualPanel1.COMPRESSION.LEVEL.1=1",
    "ExportZipVisualPanel1.COMPRESSION.LEVEL.2=2",
    "ExportZipVisualPanel1.COMPRESSION.LEVEL.3=3",
    "ExportZipVisualPanel1.COMPRESSION.LEVEL.4=4",
    "ExportZipVisualPanel1.COMPRESSION.LEVEL.5=5",
    "ExportZipVisualPanel1.COMPRESSION.LEVEL.6=6",
    "ExportZipVisualPanel1.COMPRESSION.LEVEL.7=7",
    "ExportZipVisualPanel1.COMPRESSION.LEVEL.8=8",
    "ExportZipVisualPanel1.COMPRESSION.LEVEL.9=Max"
})
public final class ArchiverVisualPanel1 extends JPanel implements ComponentMessagingInterface {

    /**
     * Creates new form ExportZipVisualPanel1
     */
    public ArchiverVisualPanel1() {
        this.logger = LoggerProvider.getLogger(ArchiverVisualPanel1.class);
        initComponents();
        support = new ChangeSupport(this);
        destinationFileNameTextField.getDocument().addDocumentListener(new DocumentListenerImpl());
    }

    @Override
    public String getName() {
        return Bundle.ExportZipVisualPanel1_NAME();
    }

    public void addChangeListener(ChangeListener l) {
        support.addChangeListener(l);
    }

    public void removeChangeListener(ChangeListener l) {
        support.removeChangeListener(l);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        destinationFileNameTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        destinationDirectoryTextField = new javax.swing.JTextField();
        extensionLabel = new javax.swing.JLabel();
        browseButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        compressionLevelSlider = new javax.swing.JSlider();

        jLabel1.setLabelFor(destinationFileNameTextField);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, Bundle.ExportZipVisualPanel1_fileNameLabel_text());

        jLabel2.setLabelFor(destinationDirectoryTextField);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, Bundle.ExportZipVisualPanel1_locationLabel_text());

        org.openide.awt.Mnemonics.setLocalizedText(browseButton, Bundle.ExportZipVisualPanel1_browseButton_text());
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        jLabel3.setLabelFor(compressionLevelSlider);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, Bundle.ExportZipVisualPanel1_COMPRESSION_LEVEL());

        compressionLevelSlider.setMaximum(9);
        compressionLevelSlider.setPaintLabels(true);
        compressionLevelSlider.setPaintTicks(true);
        compressionLevelSlider.setSnapToTicks(true);
        compressionLevelSlider.setLabelTable(getLabelTable());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(destinationDirectoryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(destinationFileNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 12, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(browseButton)
                            .addComponent(extensionLabel)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(compressionLevelSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {browseButton, extensionLabel});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {compressionLevelSlider, destinationDirectoryTextField, destinationFileNameTextField});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel2, jLabel3});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(destinationFileNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(extensionLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(destinationDirectoryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(browseButton)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(compressionLevelSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(183, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {destinationDirectoryTextField, destinationFileNameTextField, extensionLabel, jLabel1, jLabel2, jLabel3});

    }// </editor-fold>//GEN-END:initComponents

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        // TODO add your handling code here:
        String dirName = destinationDirectoryTextField.getText();
        if ("".equals(dirName)) {
            dirName = ".";
        }
        File curFile = new File(dirName);
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setMultiSelectionEnabled(false);
        chooser.setSelectedFile(curFile);
        chooser.setCurrentDirectory(curFile.getParentFile());
        chooser.setApproveButtonText(Bundle.ExportZipVisualPanel1_jfilechooser_approvebutton_text());
        int option = chooser.showOpenDialog(this);
        if (option == JFileChooser.APPROVE_OPTION) {
            File selFile = chooser.getSelectedFile();
            FileObject fobj = FileUtil.toFileObject(FileUtil.normalizeFile(selFile));
            destinationDirectoryTextField.setText(FileUtil.getFileDisplayName(fobj));
            support.fireChange();
        }

    }//GEN-LAST:event_browseButtonActionPerformed
    @Override
    public void setValue(ArchiverUserSelections selections) {
        this.selections = selections;
        //populate fields
        if (this.selections != null) {
            this.destinationFileNameTextField.setText(this.selections.getDestinationZipName());
            this.destinationDirectoryTextField.setText(FileUtil.getFileDisplayName(this.selections.getDestinationDirectory()));
            this.extensionLabel.setText("." + this.selections.getExtension());
            this.compressionLevelSlider.setValue(this.selections.getCompressionLevel());
        }
    }

    @Override
    public ArchiverUserSelections getValue() {
        if (this.selections != null) {
            this.selections.setDestinationZipName(this.destinationFileNameTextField.getText());
            final String destinationDirectoryPath = destinationDirectoryTextField.getText();
            if (!"".equals(destinationDirectoryPath)) {
                File file = new File(destinationDirectoryPath);
                file = FileUtil.normalizeFile(file);
                this.selections.setDestinationDirectory(FileUtil.toFileObject(file));
            }
            this.selections.setCompressionLevel(compressionLevelSlider.getValue());
        }
        return this.selections;
    }

    @Override
    public Boolean isPanelValid() {
        String archiveName = destinationFileNameTextField.getText();
        boolean verify1 = archiveName != null && !"".equals(archiveName);
        boolean verify2 = false;
        String destinationDirName = destinationDirectoryTextField.getText();
        if (destinationDirName != null && !"".equals(destinationDirName)) {
            File file = new File(destinationDirName);
            FileObject obj = FileUtil.toFileObject(file);
            verify2 = !obj.isVirtual() && obj.isFolder() && obj.isValid();
        }

        return verify1 && verify2;
    }

    private Dictionary<Integer, JLabel> getLabelTable() {
        Dictionary<Integer,JLabel> labels = new Hashtable<Integer, JLabel>();
        for(int x = 0; x < 10; x++){
            String text = NbBundle.getMessage(ArchiverVisualPanel1.class, "ExportZipVisualPanel1.COMPRESSION.LEVEL."+x);
            JLabel label = new JLabel(text);
            labels.put(x, label);
        }
        return labels;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseButton;
    private javax.swing.JSlider compressionLevelSlider;
    private javax.swing.JTextField destinationDirectoryTextField;
    private javax.swing.JTextField destinationFileNameTextField;
    private javax.swing.JLabel extensionLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    // End of variables declaration//GEN-END:variables

    private ArchiverUserSelections selections;
    private ChangeSupport support;
    private Logger logger;


    private class DocumentListenerImpl implements DocumentListener {

        private Logger listenerLogger;
        public DocumentListenerImpl() {
            listenerLogger = LoggerProvider.getLogger(DocumentListenerImpl.class);
        }

        @Override
        public void insertUpdate(DocumentEvent e) {
            support.fireChange();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            support.fireChange();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            support.fireChange();
        }
    }

}
