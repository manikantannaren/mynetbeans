/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.pr.nb.sqlite3.nodes.newtypes.wizard.dbtable;

import javax.swing.JPanel;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.apache.commons.lang.StringUtils;
import org.openide.WizardDescriptor;
import org.openide.util.ChangeSupport;
import org.openide.util.NbBundle;
import org.pr.nb.sqlite3.nodes.newtypes.wizard.WizardPanel;
import org.pr.nb.sqlite3.jdbc.Sqlite3DB;
import org.pr.nb.sqlite3.jdbc.Sqlite3Table;

@NbBundle.Messages({
    "NEWTABLEVISUAL_PANEL1_NAME=Step #1 : Table Name",
    "ERR_SPECIAL_CHARS_IN_TABLE_NAME=Table name can be only alpha numeric characters",
    "ERR_TABLE_NAME_EMPTY=Please provide a table name",
    "ERR_TABLE_NAME_LONG=Table name can be only 255 characters in length"
})

public final class NBSqlite3NewTableVisualPanel1 extends JPanel implements WizardPanel {

    private WizardDescriptor descriptor;

    /**
     * Creates new form NBSqlite3NewTableVisualPanel1
     */
    public NBSqlite3NewTableVisualPanel1() {
        initComponents();
        tableNameTextField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                changeSupport.fireChange();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                changeSupport.fireChange();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                changeSupport.fireChange();
            }
        });
    }

    @Override
    public String getName() {
        return Bundle.NEWTABLEVISUAL_PANEL1_NAME();
    }

    @Override
    public boolean isPanelValid() {
        descriptor.getNotificationLineSupport().clearMessages();
        String text = tableNameTextField.getText();
        Boolean retValue = true;
        if (!StringUtils.isAlphanumeric(text)) {
            retValue = false;
            descriptor.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE, Bundle.ERR_SPECIAL_CHARS_IN_TABLE_NAME());
        }
        if (StringUtils.isEmpty(text)) {
            descriptor.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE, Bundle.ERR_TABLE_NAME_EMPTY());
            retValue = false;
        }
        if (StringUtils.length(text) > 255) {
            descriptor.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE, Bundle.ERR_TABLE_NAME_LONG());
            retValue = false;
        }
        return retValue;
    }

    @Override
    public void readAndSet(WizardDescriptor wiz) {
        this.descriptor = wiz;
        Sqlite3DB db = (Sqlite3DB) wiz.getProperty("database");
        databaseTextField.setText(db.getDbPath());
    }

    @Override
    public void save(WizardDescriptor wiz) {
        wiz.putProperty("table", createBareTable());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        databaseTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        tableNameTextField = new javax.swing.JTextField();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(NBSqlite3NewTableVisualPanel1.class, "NBSqlite3NewTableVisualPanel1.jLabel1.text")); // NOI18N

        databaseTextField.setEditable(false);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(NBSqlite3NewTableVisualPanel1.class, "NBSqlite3NewTableVisualPanel1.jLabel2.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(databaseTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
                    .addComponent(tableNameTextField))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(databaseTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(tableNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {databaseTextField, jLabel1, jLabel2, tableNameTextField});

    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField databaseTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField tableNameTextField;
    // End of variables declaration//GEN-END:variables
    private final ChangeSupport changeSupport = new ChangeSupport(this);

    @Override
    public void addChangeListener(ChangeListener l) {
        changeSupport.addChangeListener(l);
    }

    @Override
    public void removeChangeListener(ChangeListener l) {
        changeSupport.removeChangeListener(l);
    }

    private Sqlite3Table createBareTable() {
        return new Sqlite3Table.Builder()
                .withTableName(tableNameTextField.getText())
                .withDatabase((Sqlite3DB) this.descriptor.getProperty("database"))
                .build();
    }
}
