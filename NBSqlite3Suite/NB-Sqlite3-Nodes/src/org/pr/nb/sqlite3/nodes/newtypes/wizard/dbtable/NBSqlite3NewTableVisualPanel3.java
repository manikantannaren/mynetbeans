/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.pr.nb.sqlite3.nodes.newtypes.wizard.dbtable;

import java.awt.Color;
import java.sql.JDBCType;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JPanel;
import javax.swing.event.ChangeListener;
import javax.swing.table.TableModel;
import org.openide.WizardDescriptor;
import org.openide.util.ChangeSupport;
import org.openide.util.NbBundle;
import org.pr.nb.sqlite3.jdbc.Sqlite3Column;
import org.pr.nb.sqlite3.jdbc.Sqlite3DB;
import org.pr.nb.sqlite3.jdbc.Sqlite3Table;
import org.pr.nb.sqlite3.nodes.newtypes.wizard.WizardPanel;
import org.pr.nb.sqlite3.nodes.newtypes.wizard.dbtable.components.DBColumnCellRenderer;
import org.pr.nb.sqlite3.nodes.newtypes.wizard.dbtable.components.DBColumnsTableModel;

@NbBundle.Messages({
    "NEWTABLEVISUAL_PANEL3_NAME=Step #3 : Summary",})
@SuppressWarnings("UseOfObsoleteCollectionType")
public final class NBSqlite3NewTableVisualPanel3 extends JPanel implements WizardPanel {

    /**
     * Creates new form NBSqlite3NewTableVisualPanel2
     */
    public NBSqlite3NewTableVisualPanel3() {
        initComponents();
    }

    @Override
    public String getName() {
        return Bundle.NEWTABLEVISUAL_PANEL3_NAME();
    }

    @Override
    public boolean isPanelValid() {
        descriptor.getNotificationLineSupport().clearMessages();

        return true;
    }

    @Override
    public void readAndSet(WizardDescriptor wiz) {
        this.descriptor = wiz;
        
        List<Sqlite3Column> createdColumns = (List<Sqlite3Column>) wiz.getProperty("columns");
        if (createdColumns == null) {
            createdColumns = new ArrayList<>();
            createdColumns.add(createBlankColumn());
        }
        prepareDBColumnsTable(createdColumns);
        
        Sqlite3Table dbTable = (Sqlite3Table) wiz.getProperty("table");
        Sqlite3DB db = (Sqlite3DB) wiz.getProperty("database");
        databaseTextField.setText(db.getName());
        tableNameTextField.setText(dbTable.getName());
    }

    private void prepareDBColumnsTable(List<Sqlite3Column> createdColumns) {
        TableModel model = new DBColumnsTableModel(createdColumns, false);
        dbColumnsTable.setModel(model);
        
        DBColumnCellRenderer renderer = new DBColumnCellRenderer();
        dbColumnsTable.setDefaultRenderer(Sqlite3Column.class, renderer);
        dbColumnsTable.setDefaultRenderer(JDBCType.class, renderer);
        dbColumnsTable.setDefaultRenderer(Integer.class, renderer);
    }

    @Override
    public void save(WizardDescriptor wiz) {
        wiz.putProperty("columns", ((DBColumnsTableModel) dbColumnsTable.getModel()).getData());
    }

    @Override
    public void addChangeListener(ChangeListener l) {
        changeSupport.addChangeListener(l);
    }

    @Override
    public void removeChangeListener(ChangeListener l) {
        changeSupport.removeChangeListener(l);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        databaseTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        tableNameTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        dbColumnsTable = new javax.swing.JTable();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(NBSqlite3NewTableVisualPanel3.class, "NBSqlite3NewTableVisualPanel3.jLabel1.text")); // NOI18N

        databaseTextField.setEditable(false);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(NBSqlite3NewTableVisualPanel3.class, "NBSqlite3NewTableVisualPanel3.jLabel2.text")); // NOI18N

        tableNameTextField.setEditable(false);

        jScrollPane1.getViewport().setBackground(Color.WHITE);

        dbColumnsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        dbColumnsTable.setRowHeight(32);
        dbColumnsTable.setShowGrid(true);
        jScrollPane1.setViewportView(dbColumnsTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(databaseTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
                            .addComponent(tableNameTextField)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(databaseTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(tableNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private Sqlite3Column createBlankColumn() {
        Sqlite3Column blankColumn = new Sqlite3Column.Builder()
                .withJDBCType(JDBCType.VARCHAR)
                .withColumnSize(255)
                .withName(DBColumnCellRenderer.getRendererText(dbColumnsTable, 0, null))
                .build();
        return blankColumn;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField databaseTextField;
    private javax.swing.JTable dbColumnsTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField tableNameTextField;
    // End of variables declaration//GEN-END:variables

    private WizardDescriptor descriptor;
    private final ChangeSupport changeSupport = new ChangeSupport(this);

}
