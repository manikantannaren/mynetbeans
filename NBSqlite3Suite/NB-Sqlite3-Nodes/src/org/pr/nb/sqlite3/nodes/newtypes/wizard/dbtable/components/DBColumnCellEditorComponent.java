/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.pr.nb.sqlite3.nodes.newtypes.wizard.dbtable.components;

import java.sql.JDBCType;
import java.util.NoSuchElementException;
import javax.swing.JTable;
import org.openide.util.NbBundle;
import org.pr.nb.sqlite3.jdbc.Sqlite3Column;

/**
 *
 * @author msivasub
 */
@NbBundle.Messages({
    "CELL_EDITOR_NAME=Column Name",
    "CELL_EDITOR_JDBC_TYPE=Data type",
    "CELL_EDITOR_COLUMN_SIZE=Size"
        
})
public class DBColumnCellEditorComponent extends javax.swing.JPanel {

    /**
     * Creates new form DBColumnCellEditorComponent
     */
    public DBColumnCellEditorComponent() {
        initComponents();
    }

    DBColumnCellEditorComponent(JTable table, Sqlite3Column dbColumn, int column) {
        initComponents();
        this.selColumn = column;
        setSqlite3Column(dbColumn, table.getRowCount());
        this.table = table;
        updatePanel();
    }

    Sqlite3Column getSqlite3Column() {
        return dbColumn;
    }

    private void setSqlite3Column(Sqlite3Column sqlite3Column, int rowCount) {
        if (sqlite3Column == null) {
            dbColumn = new Sqlite3Column.Builder()
                    .withName(Bundle.defaultColumnName(rowCount))
                    .withJDBCType(JDBCType.VARCHAR)
                    .withColumnSize(255)
                    .build();

        } else {
            this.dbColumn = sqlite3Column;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cellValueTextField = new javax.swing.JTextField();
        editorDelegateButton = new javax.swing.JButton();

        cellValueTextField.setEditable(false);
        cellValueTextField.setBorder(null);
        cellValueTextField.setPreferredSize(new java.awt.Dimension(80, 24));

        org.openide.awt.Mnemonics.setLocalizedText(editorDelegateButton, "..."); // NOI18N
        editorDelegateButton.setBorder(null);
        editorDelegateButton.setBorderPainted(false);
        editorDelegateButton.setPreferredSize(new java.awt.Dimension(24, 24));
        editorDelegateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editorDelegateButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(cellValueTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(editorDelegateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cellValueTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editorDelegateButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cellValueTextField, editorDelegateButton});

    }// </editor-fold>//GEN-END:initComponents

    private void editorDelegateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editorDelegateButtonActionPerformed

        switch (selColumn) {
            case 0:
                updateName();
                break;
            case 1:
                updateDBColumnType();
                break;
            case 2:
                updateDBColumnSize();
                break;
            default:
                throw new NoSuchElementException("Unknown column index " + selColumn);
        }
        updatePanel();

    }//GEN-LAST:event_editorDelegateButtonActionPerformed

    private Sqlite3Column.Builder getBuilder() {
        return new Sqlite3Column.Builder()
                .withName(dbColumn.getName())
                .withJDBCType(dbColumn.getJdbcType())
                .withColumnSize(dbColumn.getColumnSize());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField cellValueTextField;
    private javax.swing.JButton editorDelegateButton;
    // End of variables declaration//GEN-END:variables
    private Sqlite3Column dbColumn;
    private int selColumn;
    private JTable table;

    private void updateName() {
        TextFieldCellEditorDelegate delegate = new TextFieldCellEditorDelegate(DBColumnCellRenderer.getRendererText(table, selColumn, dbColumn));
        String changedData = delegate.showColumnAttributeEditor(Bundle.CELL_EDITOR_NAME());
        dbColumn = getBuilder()
                .withName(changedData)
                .build();
    }

    private void updatePanel() {
        cellValueTextField.setText(DBColumnCellRenderer.getRendererText(table, selColumn, dbColumn));
    }

    private void updateDBColumnType() {
        String name = DBColumnCellRenderer.getRendererText(table, selColumn, dbColumn);
        ListCellEditorDelegate<JDBCType> delegate = new ListCellEditorDelegate<>(JDBCType.valueOf(name),JDBCType.values());
        JDBCType newType = delegate.showColumnAttributeEditor(Bundle.CELL_EDITOR_JDBC_TYPE());
        dbColumn = getBuilder()
                .withJDBCType(newType)
                .build();
    }

    private void updateDBColumnSize() {
        String size = DBColumnCellRenderer.getRendererText(table, selColumn, dbColumn);
        IntegerSpinnerCellEditorDelegate delegate = new IntegerSpinnerCellEditorDelegate(Integer.parseInt(size),0, 255, 1);
        int newSize = delegate.showColumnAttributeEditor(Bundle.CELL_EDITOR_COLUMN_SIZE());
        dbColumn = getBuilder()
                .withColumnSize(newSize)
                .build();
    }

}
